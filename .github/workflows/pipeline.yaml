name: Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io/${{ github.repository }}
  IMAGE_NAME: hrs-app

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.PG_USER }}
          POSTGRES_PASSWORD: ${{ secrets.PG_PASSWORD }}
          POSTGRES_DB: ${{ secrets.PG_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U $${PG_USER} -d $${PG_DB}"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant gradlew permission
        run: chmod +x gradlew

      - name: Build & Run Unit Tests
        run: ./gradlew clean build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/*.jar

#  Step to build and push docker image
#  docker:
#    name: Build & Push Docker Image
#    runs-on: ubuntu-latest
#    needs: build-test
#
#    steps:
#      - name: Checkout source
#        uses: actions/checkout@v4
#
#      - name: Log in to GitHub Container Registry
#        uses: docker/login-action@v3
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}

#      - name: Build Docker Image
#        run: |
#          docker build -t $REGISTRY/$IMAGE_NAME:latest .
#
#      - name: Push Docker Image
#        run: |
#          docker push $REGISTRY/$IMAGE_NAME:latest

#  Deploy to EC2
#  terraform:
#    name: Terraform Deploy
#    runs-on: ubuntu-latest
#    needs: docker
#
#    permissions:
#      contents: read
#      id-token: write
#
#    env:
#      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#      AWS_REGION: ${{ secrets.AWS_REGION }}
#      REGISTRY: ${{ env.REGISTRY }}
#      IMAGE_NAME: ${{ env.IMAGE_NAME }}
#
#    steps:
#      - name: Checkout source
#        uses: actions/checkout@v4
#
#      - name: Set up Terraform
#        uses: hashicorp/setup-terraform@v3
#        with:
#          terraform_version: 1.9.5
#
#      - name: Terraform Init
#        run: terraform init
#
#      - name: Terraform Validate
#        run: terraform validate
#
#      - name: Terraform Plan
#        run: terraform plan -out=tfplan
#
#      - name: Terraform Apply
#        run: terraform apply -auto-approve tfplan
#
#      - name: Output EC2 Public IP
#        run: terraform output ec2_public_ip
